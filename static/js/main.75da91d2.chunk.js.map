{"version":3,"sources":["components/TableComponent.js","components/GraphComponent.js","components/DateTimePicker.js","App.js","serviceWorker.js","index.js"],"names":["columns","Header","accessor","TableComponent","props","react_default","a","createElement","style","width","padding","es","data","minRows","defaultPageSize","showPaginationBottom","showPaginationTop","sortable","filterable","GraphComponent","className","react_chartjs_2_es","labels","map","d","timestamp","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderWidth","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","eCPM","data1","DateTimePicker","_ref","dateRange","setDateRange","_React$useState","React","useState","Date","_React$useState2","Object","slicedToArray","date","setDate","useEffect","entry_default","onChange","value","maxDate","App","setData","_React$useState3","_React$useState4","Axios","get","then","objectSpread","revenue","impressions","toFixed","length","temp","sort","b","filter","catch","err","console","error","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75da91d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactTable from 'react-table';\r\nimport 'react-table/react-table.css';\r\n\r\nconst columns = [\r\n  { Header: 'timestamp', accessor: 'timestamp' },\r\n  { Header: 'game', accessor: 'game' },\r\n  { Header: 'revenue', accessor: 'revenue' },\r\n  { Header: 'impressions', accessor: 'impressions' },\r\n  { Header: 'eCPM', accessor: 'eCPM' }\r\n];\r\n\r\nexport default function TableComponent(props) {\r\n  return (\r\n    <div style={{ width: '100%' }}>\r\n      <div style={{ padding: '20px' }}>\r\n        <ReactTable\r\n          data={props.data}\r\n          columns={columns}\r\n          minRows={0}\r\n          defaultPageSize={5}\r\n          showPaginationBottom={false}\r\n          showPaginationTop\r\n          sortable\r\n          filterable\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nexport default function GraphComponent(props) {\r\n  const { data } = props;\r\n  const data1 = data => {\r\n    return {\r\n      labels: data.map(d => d.timestamp),\r\n      datasets: [\r\n        {\r\n          label: 'eCPM',\r\n          fill: true,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(2, 148, 255, 0)',\r\n          borderColor: '#0294ff',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderWidth: 1,\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: '#0294ff',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: '#0294ff',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: data.map(d => d.eCPM)\r\n        }\r\n      ]\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className='line-graph'>\r\n      <Line data={data1(data)} />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport DateRangePicker from '@wojtekmaj/react-daterange-picker';\r\n\r\nexport default function DateTimePicker({ dateRange, setDateRange }) {\r\n  const [date, setDate] = React.useState([new Date(), new Date()]);\r\n\r\n  React.useEffect(() => {\r\n    setDateRange(date);\r\n  }, [date, setDateRange]);\r\n\r\n  const onChange = d => {\r\n    setDate(d);\r\n    setDateRange(d);\r\n  };\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <DateRangePicker onChange={onChange} value={dateRange} maxDate={new Date()} />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport Axios from 'axios';\nimport TableComponent from './components/TableComponent';\nimport GraphComponent from './components/GraphComponent';\nimport DateTimePicker from './components/DateTimePicker';\nimport './App.css';\n\nfunction App() {\n  const [data, setData] = React.useState([]);\n\n  const [dateRange, setDateRange] = React.useState([new Date(), new Date()]);\n\n  React.useEffect(() => {\n    Axios.get(`https://www.mocky.io/v2/5cd04a20320000442200fc10`)\n      .then(d => d.data)\n      .then(d => d.map(d =>({\n          ...d,\n          eCPM: ((d.revenue / d.impressions) * 1000).toFixed(2)\n        })))\n      .then(data => {\n        if (data && data.length) {\n          const temp = data.sort((a, b) => (new Date(a.timestamp) > new Date(b.timestamp) ? -1 : 1))\n            .filter(d => dateRange[0] <= new Date(d.timestamp))\n            .filter(d => dateRange[1] >= new Date(d.timestamp));\n          setData(temp);\n        } else setData([]);\n      })\n      .catch(err => {\n        setData([]);\n        console.error(err);\n      });\n  }, [dateRange]);\n\n  return (\n    <div className='container'>\n      <DateTimePicker dateRange={dateRange} setDateRange={d => setDateRange(d)} />\n      <GraphComponent data={data} />\n      <TableComponent data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}